// 존재하는 이름 공간이 다르면 동일한 이름의 함수 및 변수 선언 가능
// 이름 공간 : 프로젝트의 진행에 있어 발생할 수 있는 이름의 충돌을 막을 목적으로 존재하는 것

#include <iostream>
/*
using std::cin;
using std::cout;
using std::endl;

int main(void)
{
    int num = 20;
    cout<<"Hello World!"<<endl;
    cout<<"Hello "<<"World!"<<endl;
    cout<<num<<' '<<'A';
    cout<<' '<<3.14<<endl;
    return 0;
}
*/
/*
using namespace std;

int main(void)
{
    int num = 20;
    cout<<"Hello World!"<<endl;
    cout<<"Hello "<<"World!"<<endl;
    cout<<num<<' '<<'A';
    cout<<' '<<3.14<<endl;
    return 0;
}
*/

// 복습 //
// const int num = 10; : 변수 num 상수화
// const int * ptrl=&val1; : 포인터 ptr1 이용해서 val1의 값 변경 불가
// int * const ptr2=&val2; : 포인터 ptr2 상수화
// const int * const ptr3=&val3; : 포인터 ptr3이 상수화되었으며, ptr3을 이용해서 val3의 값 변경 불가
// 데이터 : 전역변수가 저장되는 영역
// 스택 : 지역변수 및 매개변수가 저장되는 영역
// 힙 : malloc 함수 호출에 의해 프로그램이 실행되는 과정에서 동적으로 할당이 이뤄지는 영역
// malloc, free : malloc 함수 호출에 의해 할당된 메모리 공간은 free 함수 호출을 통해 소멸하지 않으면 해제되지 않음.
// call-by-value, call-by-reference

using namespace std;

int main(void)
{
    int num = 10;
    int i = 0;
    cout<<"true : "<<true<<endl;
    cout<<"false : "<<false<<endl;
    
    while(true)
    {
        cout<<i++<<' ';
        if(i > num)
            break;
    }
    cout<<endl;
    cout<<"sizeof 1 : "<<sizeof(1)<<endl;
    cout<<"sizeof 0 : "<<sizeof(0)<<endl;
    cout<<"sizeof true : "<<sizeof(true)<<endl;
    cout<<"sizeof false : "<<sizeof(false)<<endl;
    return 0;
}
